@page "/fetchdata"
@using System.Text.Json.Serialization
@using System.Net.Http
@using BlazorErgast.Pages
@inject IHttpClientFactory _clientFactory

<div class="container">
    <div class="row">
        <div class="col">
            @if (Seasons == null)
            {
                <h4>Loading...</h4>
            }
            else
            {
                <p>This component demonstrates fetching data from the Ergast.com API.</p>
                <p>There are @fetchedData.MRData.Total total seasons in the DB.</p>
                <p>What is shown here is restricted to a maximum of @fetchedData.MRData.Limit</p>

                <table class="table col-sm">
                    <thead>
                        <tr>
                            <th>Year of season</th>
                            <th>Url</th>
                            <th></th>

                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var season in Seasons)
                        {
                            <tr>
                                <td>@season.season</td>
                                <td><a href="@season.url" target="_blank">Wiki</a></td>
                                <td><button @onclick="@(()=> Show(season.season))" class="btn-light">See Drivers</button></td>
                            </tr>
                        }
                    </tbody>
                </table>

            }
        </div>
        <div class="col">
            @if (drivercomponent != null)
            {
                <drivercomponent Year = @YearToPass ></drivercomponent>

            }


        </div>
    </div>
</div>

@code {
    DriverList drivercomponent;
    private FetchedData fetchedData;
    private Season[] Seasons;
    public string YearToPass = "2021";
    protected override async Task OnInitializedAsync()
    {
        var Http = _clientFactory.CreateClient("ErgastClient");
        fetchedData = await Http.GetFromJsonAsync<FetchedData>("api/f1/seasons.json");
        Seasons = fetchedData.MRData.SeasonTable.Seasons;
    }

    public void Show(string year)
    {
        
        drivercomponent = new DriverList(year);
        
    }

    public async void GiveDriverYear(string year)
    {
        YearToPass = year;
        await drivercomponent.GetDriversAgianAsync(year);
    }


    public class FetchedData
    {
        public MrData MRData { get; set; }
    }

    public class MrData
    {
        public string Xmlns { get; set; }
        public string Series { get; set; }
        public string Url { get; set; }
        public string Limit { get; set; }
        public string Offset { get; set; }
        public string Total { get; set; }
        public SeasonTable SeasonTable { get; set; }
    }

    public class SeasonTable
    {
        public Season[] Seasons { get; set; }
    }

    public class Season
    {
        public string season { get; set; }
        public string url { get; set; }
    }
}
